# Spring Boot Application Configuration
#
# This file configures the application for local development.
# In production, you'd override these with environment-specific values.

spring:
  application:
    name: retail-discount-service

  # MongoDB Configuration
  data:
    mongodb:
      # Connection URI with host, port, and database name
      # Format: mongodb://[username:password@]host[:port]/database
      uri: mongodb://localhost:27017/retail_discount

      # Database name (can be specified in URI or separately)
      database: retail_discount

      # Auto-index creation
      # Spring Data will automatically create indexes defined with @Indexed
      auto-index-creation: true

  # Jackson JSON Configuration (for REST API)
  jackson:
    # Serialize dates as ISO-8601 strings (2024-01-15T10:30:00)
    # instead of timestamps (milliseconds since epoch)
    serialization:
      write-dates-as-timestamps: false

    # Configure how LocalDateTime is formatted in JSON responses
    date-format: yyyy-MM-dd'T'HH:mm:ss

    # Set the timezone for date serialization
    time-zone: UTC

    # Pretty print JSON in responses (easier to read, larger size)
    # Set to false in production for smaller payloads
    default-property-inclusion: non_null

# Server Configuration
server:
  # Port the application runs on
  port: 8080

  # Context path (base URL)
  # Access API at http://localhost:8080/api/v1/...
  servlet:
    context-path: /api/v1

  # Error handling configuration
  error:
    # Include detailed error messages in responses
    # Set to 'never' in production for security
    include-message: always
    include-binding-errors: always
    include-stacktrace: on_param
    include-exception: false

# Logging Configuration
logging:
  level:
    # Root logging level
    root: INFO

    # Package-specific logging levels
    io.mosaed.retaildiscountservice: DEBUG
    org.springframework.data.mongodb: DEBUG
    org.springframework.web: DEBUG

  # Log pattern for console output
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %logger{36} - %msg%n"

# Management and Actuator (for monitoring and health checks)
management:
  endpoints:
    web:
      exposure:
        # Expose health and info endpoints
        # In production, you might expose metrics, prometheus, etc.
        include: health,info

  endpoint:
    health:
      show-details: always

# Application-specific properties
# These can be injected into beans using @Value or @ConfigurationProperties
application:
  name: Retail Discount Service
  version: 1.0.0
  description: Calculate discounts for retail bills based on customer type